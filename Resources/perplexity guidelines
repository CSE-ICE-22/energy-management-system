Li-ion Battery Energy Management System for IoT Devices
Challenge with State-of-Charge (SOC) Estimation
The discharge curve of a typical Li-ion battery shows a flat voltage plateau between roughly 80% and 20% SOC. In this region, the battery voltage remains relatively constant, making voltage-based SOC estimation unreliable. Displaying only the voltage will not reflect the true remaining capacity or time—leading to potential inaccuracies and unbalanced system performance.

Recommended Algorithms for SOC Estimation
1. Coulomb Counting Method
How it works: Measures the current flowing in and out of the battery over time, integrating the total charge used (or replenished) to estimate SOC.

Strengths: More accurate in the flat region of the curve because it directly tracks the amount of charge.

Implementation: Use your INA219 or ACS712 sensors for current measurement; update the SOC calculation on the Arduino or Raspberry Pi.

Limitations: Sensitive to current sensor accuracy and initial SOC calibration.

2. Extended Kalman Filter (EKF)
How it works: Combines battery voltage, current, and a battery equivalent circuit model to estimate SOC—even in flat curve regions. EKF accounts for model uncertainty and measurement noise, making it robust.

Strengths: Good accuracy over the full SOC range, adaptable to dynamic load conditions.

Implementation: Requires modeling the battery (resistor-capacitor network) and running real-time computation—ideal for your Raspberry Pi.

Limitation: More computationally intensive, requires tuning and initial experimentation.

3. Machine Learning Approaches
How it works: Train an ML model (e.g., on historical discharge data saved to your SD card) to predict SOC or remaining time, learning non-linearities in discharge profiles.

Strengths: Can provide accurate runtime predictions when enough data is available.

Implementation: Raspberry Pi can run trained models for runtime prediction.

Limitations: Needs a good dataset and training effort.

Hybrid Approach
Often, systems combine these methods: use Coulomb counting for high-resolution SOC tracking; periodically recalibrate with open-circuit voltage (when the device is at rest) or use EKF/ML for drift correction and uncertainty management.

Energy Management Techniques
Essential Techniques
Passive Balancing: Components you've selected (resistors, MOSFETs, temperature sensor) will keep cell voltages equal, improving battery life and performance.

Current Monitoring: Your INA219/ACS712 feeds real-time data for accurate tracking of energy flow.

Smart Display: OLED shows not just voltage, but estimated SOC and predicted runtime, using algorithmic methods outlined above.

Thermal Management: The temperature sensor monitors heat to prevent cell damage due to balancing or overcurrent.

Over-Discharge/Overcharge Protection: Essential to shut down loads or charging circuits when voltage hits safe thresholds.

Advanced Improvements
Optimize Charging Cycles: Avoid stressing the battery; use your smart relay module to cut charging at optimal points.

Reduce Idle Loads: Program the Arduino to sleep or turn off low-priority circuits when idle.

Temperature Compensation: Account for temperature effect on capacity and discharge curve by integrating sensor data into SOC/runtime estimation.

Predictive Analytics: Use historic SD card data and ML to adapt predictions to aging battery behavior.

Practical Implementation Steps
Initial Calibration

Fully charge and discharge battery to calibrate starting SOC.

Live SOC Tracking

Integrate current (Coulomb counting).

Optionally, implement EKF combining voltage/current/temperature.

User Display

Show estimated percentage, runtime remaining, and health alerts on OLED.

Balancing Control

Monitor individual cell voltages and switch balancing resistors via microcontroller.

Data Logging

Store voltage, current, temperature logs for long-term analytics and model updates.

Update Algorithm

Periodically refine parameters with actual data for SOC estimation and remaining time.

Conclusion
For accurate energy management in your IoT device over the key 80–20% SOC range, voltage alone is insufficient. Implement Coulomb counting, optionally extended by Kalman Filter or ML, using your existing sensors and computing capabilities. Combine these algorithms with robust balancing, thermal management, and smart display strategies. These steps will ensure consistent, reliable SOC estimation and optimal energy management for your system.

Key References:
 Analog Devices on SOC estimation
 Frontiers in Energy Research: Kalman Filter SOC in Li-ion
 Monolithic Power: BMS and balancing
 Battery Power Tips: How to read battery discharge curves
 Green Cubes: Efficient energy management strategies
 Nature: SOC estimation for Li-ion pouch cell with ML

